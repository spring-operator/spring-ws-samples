configurations {
	jaxb
}

buildscript {
	repositories {
		maven { url 'https://repo.maven.apache.org/maven2/' }
	}

	dependencies {
		classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.9'
	}
}

ext.tomcatVersion =       '7.0.42'


apply plugin: 'war'
apply plugin: 'tomcat'

task genJaxb {
	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "${projectDir}/src/main/resources/schema.xsd"

	inputs.files schema
	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema,
					package: "org.springframework.ws.samples.mtom.schema") {
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 1.6, target: 1.6, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}


tomcatRun {
	contextPath = 'mtom-server'
}

dependencies {
	compile("org.springframework.ws:spring-ws-core:$springWsVersion")
    compile("org.springframework:spring-context:$springVersion")
	compile(files(genJaxb.classesDir).builtBy(genJaxb))

	runtime("log4j:log4j:1.2.16")
    runtime("wsdl4j:wsdl4j:1.6.1")

	jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"	

	tomcat("org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
		   "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion")
	tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
		exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	}
}
