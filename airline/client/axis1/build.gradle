configurations {
	axis
}

ext.axisVersion =  	  '1.4'

task axis {
	ext.sourcesDir = "${buildDir}/generated-sources/axis"
	ext.classesDir = "${buildDir}/classes/axis"
	ext.wsdl = "${projectDir}/../airline.wsdl"

	inputs.files wsdl
	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "axis", classname: "org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask",
					classpath: configurations.axis.asPath

			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			axis(output: sourcesDir, url: wsdl) {
				mapping(namespace: "https://www.springframework.org/spring-ws/samples/airline/definitions", 
					package: "org.springframework.ws.samples.airline.client.axis1")
				mapping(namespace: "https://www.springframework.org/spring-ws/samples/airline/schemas/messages", 
					package: "org.springframework.ws.samples.airline.client.axis1")
				mapping(namespace: "https://www.springframework.org/spring-ws/samples/airline/schemas/types", 
					package: "org.springframework.ws.samples.airline.client.axis1")
			}

			javac(destdir: classesDir, source: 1.6, target: 1.6, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.axis.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}

		}
	}
}

dependencies {
	compile("axis:axis:$axisVersion")
	compile("axis:axis-jaxrpc:$axisVersion")
	compile(files(axis.classesDir).builtBy(axis))
	runtime("log4j:log4j:1.2.16")
	axis("axis:axis:$axisVersion")
	axis("axis:axis-ant:$axisVersion")
}

task runClient(dependsOn: 'classes', type:JavaExec) {
	main = "org.springframework.ws.samples.airline.client.axis1.Main"
	classpath = sourceSets.main.runtimeClasspath
}